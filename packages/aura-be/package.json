{
  "author": "piBrain, Inc.",
  "dependencies": {
    "apollo-engine": "^1.0.1",
    "apollo-server-express": "^1.3.2",
    "argon2": "^0.17.2",
    "aws-sdk": "^2.62.0",
    "aws-serverless-express": "^2.2.0",
    "axios": "^0.17.1",
    "babel-core": "^6.22.1",
    "babel-eslint": "^7.1.1",
    "babel-plugin-transform-object-rest-spread": "^6.23.0",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-polyfill": "^6.23.0",
    "babel-preset-env": "^1.4.0",
    "babel-preset-latest": "^6.22.0",
    "bluebird": "^3.5.0",
    "body-parser": "^1.16.0",
    "cors": "^2.8.1",
    "express": "^4.14.1",
    "form-data": "^2.3.1",
    "google-auth-library": "^0.10.0",
    "graphql": "^0.11.7",
    "graphql-iso-date": "^3.1.0",
    "graphql-server-express": "^1.2.0",
    "graphql-subscriptions": "^0.5.5",
    "graphql-tools": "^0.10.0",
    "graphql-type-json": "^0.1.4",
    "kue": "^0.11.6",
    "lodash": "^4.17.4",
    "mysql": "^2.13.0",
    "passport-google-oauth": "^1.0.0",
    "pg": "^6.1.2",
    "portscanner": "^2.1.1",
    "r2": "^2.0.0",
    "request": "^2.83.0",
    "request-promise-native": "^1.0.5",
    "sendgrid": "^5.1.1",
    "sequelize": "^4.4.2",
    "sequelize-replace-enum-postgres": "^1.3.0",
    "shortid": "^2.2.8",
    "subscriptions-transport-ws": "^0.9.2",
    "twilio": "^3.4.0",
    "uuid": "^3.1.0"
  },
  "description": "",
  "devDependencies": {
    "apollo-cache-inmemory": "^1.1.12",
    "apollo-client": "^2.2.8",
    "apollo-link-http": "^1.5.3",
    "babel-cli": "^6.24.1",
    "chai": "^4.1.2",
    "chai-http": "^3.0.0",
    "eslint": "^3.15.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^4.0.0",
    "eslint-plugin-react": "^6.9.0",
    "factory-girl": "^5.0.2",
    "graphql": "^0.13.2",
    "graphql-tag": "^2.8.0",
    "mocha": "^5.0.0",
    "node-fetch": "^2.1.2",
    "nodemon": "^1.11.0",
    "sequelize-cli": "^4.0.0",
    "sinon": "^4.2.2",
    "sinon-chai": "^2.14.0"
  },
  "license": "By Permission Only",
  "main": "src/index.js",
  "name": "aura-be",
  "private": true,
  "repository": "https://github.com/piBrain/aura_data_qa",
  "scripts": {
    "build": "./node_modules/.bin/babel src --out-dir lib --source-maps --quiet",
    "db-init": "./node_modules/.bin/sequelize db:migrate --url $DB_URL",
    "debug": "NODE_ENV=local nodemon --inspect --require babel-core/register --require babel-polyfill local.js",
    "deploy-dev": "if [ -e native_node_modules ]; then rm -rf native_node_modules ; fi && mv node_modules native_node_modules && yarn linuxify-node-modules && yarn send-to-dev && mv node_modules linux_node_modules && mv native_node_modules node_modules",
    "deploy-prod": "if [ -e native_node_modules ]; then rm -rf native_node_modules ; fi && mv node_modules native_node_modules && yarn linuxify-node-modules && yarn send-to-prod && mv node_modules linux_node_modules && mv native_node_modules node_modules",
    "import-data": "node ./import_data.js",
    "import-debug": "NODE_ENV=local nodemon --inspect --require babel-core/register --require babel-polyfill ./import_data.js",
    "linuxify-node-modules": "if [ -e linux_node_modules ]; then mv linux_node_modules node_modules ; else docker run -v $PWD:/nodePackage -w /nodePackage --rm pibrain/amazonlinux-node:v6.10.3 /bin/bash -c '. /root/.nvm/nvm.sh && yarn reinstall' ; fi",
    "local": "NODE_ENV=local nodemon --watch local.js --watch src --watch .babelrc --watch .sequelizerc --watch config.js --watch package.json local.js",
    "reinstall": "if [ -e node_modules ]; then echo 'deleting node_modules...' && echo '...' && rm -rf node_modules ; fi && echo 'installing node_modules...' && echo '...' && yarn install",
    "send-to-dev": "printf 'building...' && yarn build && if [ -e api.zip ]; then rm -f api.zip; fi && printf 'compressing...' && zip -qr api * && printf 'uploading...' && aws lambda update-function-code --function-name aura_be_dev --zip-file fileb://api.zip",
    "send-to-prod": "printf 'building...' && yarn build && if [ -e api.zip ]; then rm -f api.zip; fi && printf 'compressing...' && zip -qr api * && printf 'uploading...' && aws lambda update-function-code --function-name aura_be_prod --zip-file fileb://api.zip",
    "test": "/bin/bash ./test_runner.sh"
  },
  "version": "0.0.1-2"
}
