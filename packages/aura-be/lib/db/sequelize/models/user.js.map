{"version":3,"sources":["../../../../src/db/sequelize/models/user.js"],"names":["module","exports","sequelize","DataTypes","attributes","firstName","type","STRING","field","lastName","email","password","validate","isLongEnough","val","length","Error","isSufficientlyComplex","arrayPass","Array","passesSymCheck","some","chr","match","passesNumericCheck","passesAlphaCheck","secQuestion1","secQuestion2","secQuestionResponse1","secQuestionResponse2","token","activationNonce","activationExpiry","DATE","signInType","ENUM","active","BOOLEAN","locked","resetToken","phoneNumber","resetExpiry","inPasswordReset","id","INTEGER","allowNull","autoIncrement","primaryKey","hashPassword","user","options","changed","hash","argon2i","then","setDataValue","hooks","beforeCreate","beforeUpdate","underscored","User","define","associate","models","belongsToMany","Team","through","UserTeam"],"mappings":"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","file":"user.js","sourcesContent":["'use strict';\nimport argon2 from 'argon2'\nimport { generateSalt } from 'argon2'\n\nmodule.exports = function(sequelize, DataTypes) {\n  const attributes = {\n    firstName: {\n      type: DataTypes.STRING,\n      field: 'first_name',\n    },\n    lastName:{ type: DataTypes.STRING, field: 'last_name' },\n    email:{ type: DataTypes.STRING },\n    password: {\n      type: DataTypes.STRING,\n      validate: {\n        isLongEnough: function (val) {\n          if(val.length < 16) {\n            throw new Error('Password is not long enough. Must be at least 16 characters.')\n          }\n        },\n        isSufficientlyComplex: function (val) {\n          var arrayPass = new Array(val)\n          let passesSymCheck = arrayPass.some((chr) => {\n            return chr.match(/[ !\"#\\$%&'\\(\\)\\?\\*\\+\\,\\-\\./\\:;\\<\\=\\>?@\\[\\\\\\]\\^_`\\{\\|\\}~]/)\n          })\n          let passesNumericCheck = arrayPass.some((chr) => { return chr.match(/\\d/) })\n          let passesAlphaCheck = arrayPass.some((chr) => { return chr.match(/[a-zA-Z]/)})\n          if(!(passesSymCheck && passesNumericCheck && passesAlphaCheck)) { \n            throw new Error('Must have at least 1 of each:  number, letter, and symbol(\"#$%&\\'()*+,-./:;<=>?@[\\]^_`{|}~)')\n          }\n        }\n      },\n    },\n    secQuestion1: {\n      type: DataTypes.STRING,\n      field: 'sec_question_1'\n    },\n    secQuestion2: {\n      type: DataTypes.STRING,\n      field: 'sec_question_2'\n    },\n    secQuestionResponse1:{ type: DataTypes.STRING, field: 'sec_question_response_1' },\n    secQuestionResponse2:{ type: DataTypes.STRING, field: 'sec_question_response_2' },\n    token:{ type: DataTypes.STRING },\n    activationNonce:{ type: DataTypes.STRING, field: 'activation_nonce' },\n    activationExpiry:{ type: DataTypes.DATE, field: 'activation_expiry' },\n    signInType:{ type: DataTypes.ENUM('password', 'google'), field: 'sign_in_type' },\n    active:{ type: DataTypes.BOOLEAN },\n    locked:{ type: DataTypes.BOOLEAN },\n    resetToken:{ type: DataTypes.STRING, field: 'reset_token' },\n    phoneNumber:{ type: DataTypes.STRING, field: 'phone_number' },\n    resetExpiry:{ type: DataTypes.DATE, field: 'reset_expiry' },\n    inPasswordReset:{ type: DataTypes.BOOLEAN, field: 'in_password_reset' },\n    id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      autoIncrement: true,\n      primaryKey: true,\n    },\n  }\n\n  const hashPassword = (user, options) => {\n    if (!user.changed('password')) { return };\n    return argon2.hash(user.password, { type: argon2.argon2i }).then((hash) => {\n      user.setDataValue('password', hash)\n    })\n  }\n\n  const options = {\n    hooks: {\n      beforeCreate: hashPassword,\n      beforeUpdate: hashPassword,\n    },\n    underscored: true,\n  }\n\n  var User = sequelize.define('User', attributes, options);\n  User.associate = (models) => {\n    User.belongsToMany(models.Team, { through: models.UserTeam })\n  }\n  return User;\n};\n"]}