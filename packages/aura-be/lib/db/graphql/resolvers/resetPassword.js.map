{"version":3,"sources":["../../../../src/db/graphql/resolvers/resetPassword.js"],"names":["executeResetPassword","nonce","resetToken","newPassword","console","log","User","findOne","where","locked","inPasswordReset","then","user","err","response","clearResetMetaUser","expired","isExpired","get","set","save","processSave","catch","name","errors","map","error","message","clearSessionPasswordResetMetaData","expiry","currentTimestamp","Date","expiryTimestamp","sendMail","email","sent","createMail","to","subject","content","customArgs","type","status","body","headers","Session","session","resetPassword","_","args","context"],"mappings":"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","file":"resetPassword.js","sourcesContent":["import db from '../../sequelize/models/db_connection'\nimport { mailClient, emailDefaults } from '../../../lib/mail_client'\n\nconst executeResetPassword = ({ nonce, resetToken, newPassword }) => {\n  console.log('executeResetPassword')\n  return db.User.findOne({\n    where: { resetToken, locked: true, inPasswordReset: true }\n  }).then(async (user) => {\n    if(!user) { return { err: true, response: 'Incorrect code entered, please try again.' } }\n    clearResetMetaUser(user)\n    const expired = isExpired(user.get('resetExpiry'))\n    if(!expired) { user.set('password', newPassword) }\n    return user.save().then( async () => {\n      return processSave(nonce, expired)\n    }).catch((err) => {\n      if(err.name == 'SequelizeValidationError') {\n        return { err: true, response: err.errors.map((error) => error.message) }\n      }\n      console.error(err)\n      return { err: true, response: 'Whoops something went wrong.' }\n    })\n  }).catch((err) => {\n    console.error(err)\n    return { err: true, response: err.message }\n  })\n}\n\nconst processSave = async (nonce, isExpired) => {\n  try {\n    await clearSessionPasswordResetMetaData(nonce)\n  } catch(err) {\n    console.error(err)\n  }\n  if(isExpired) {\n    return { err: true, response: 'The password reset has expired please try the process again if you still need to reset your password.' }\n  } else {\n    try {\n      // await sendMail(user.email)\n    } catch(err) {\n      console.error(err)\n    }\n    return { err: false, response: 'Success! Please try logging in.' }\n  }\n}\n\nconst isExpired = (expiry) => {\n  const currentTimestamp = new Date()\n  const expiryTimestamp = new Date(expiry)\n  return currentTimestamp > expiryTimestamp\n}\n\nconst clearResetMetaUser = (user) => {\n  user.set('locked', false)\n  user.set('inPasswordReset', false)\n  user.set('resetToken', null)\n  user.set('resetExpiry', null)\n}\n\nconst sendMail = async (email) => {\n  try {\n    const sent = await mailClient.sendMail(mailClient.createMail({\n      ...emailDefaults,\n      to: email,\n      subject: 'Your password has been reset.',\n      content: 'Just letting you know your account has had its password reset. If this was not you, please contact support+aura@pibrain.io.',\n      customArgs: { type: 'passwordResetNotification' }\n    }))\n  } catch(err) {\n    console.log(err)\n    console.log(err.message, err.response.status, err.response.body, err.response.headers)\n    throw 'Sending mail failed.'\n  }\n}\n\nconst clearSessionPasswordResetMetaData = (nonce) => {\n  return db.Session.findOne( { where: { nonce } } ).then((session) => {\n    if(!session) { throw 'Session not found.' }\n    session.set('passwordResetAttempts', 0)\n    session.set('suppliedResetEmail', null)\n    session.save()\n  })\n}\n\nconst resetPassword = (_, args, context) => {\n  console.log('resetPassword')\n  return executeResetPassword(args)\n}\n\nexport default resetPassword\n"]}