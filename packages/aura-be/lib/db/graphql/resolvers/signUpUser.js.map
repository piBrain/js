{"version":3,"sources":["../../../../src/db/graphql/resolvers/signUpUser.js"],"names":["executeSignUpUser","args","console","log","nonce","generate","date","Date","setHours","getHours","user","newRecord","User","findOrCreate","where","$or","activationNonce","email","defaults","active","activationExpiry","err","response","set","save","url","subject","content","type","returnResponse","sendMail","message","signUpUser","_","context"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMA;AAAA,6CAAoB,WAAOC,IAAP,EAAgB;AACxCC,YAAQC,GAAR,CAAY,mBAAZ;AACA,QAAIC,QAAQ,kBAAQC,QAAR,EAAZ;AACA,QAAIC,OAAO,IAAIC,IAAJ,EAAX;AACAD,SAAKE,QAAL,CAAcF,KAAKG,QAAL,KAAgB,CAA9B;AACA,QAAI;AACF,UAAIC,IAAJ,EAAUC,SAAV;;AADE,kBAEkB,MAAM,wBAAGC,IAAH,CAAQC,YAAR,CACxB;AACEC,eAAO;AACLC,eAAK;AACHC,6BAAiBZ,KADd;AAEHa,mBAAOhB,KAAKgB;AAFT;AADA,SADT;AAOEC,6CACKjB,IADL;AAEEkB,kBAAQ,KAFV;AAGEH,2BAAiBZ,KAHnB;AAIEgB,4BAAkBd;AAJpB;AAPF,OADwB,CAFxB;;AAAA;;AAEDI,UAFC;AAEKC,eAFL;;AAkBF,UAAGD,KAAKS,MAAR,EAAgB;AACd,eAAO,EAAEE,KAAK,IAAP,EAAaC,UAAU,kDAAvB,EAAP;AACD;AACD,UAAG,CAACX,SAAJ,EAAe;AACbD,aAAKa,GAAL,CAAS,kBAAT,EAA6BjB,IAA7B;AACAI,aAAKa,GAAL,CAAS,iBAAT,EAA4BnB,KAA5B;AACD;AACD,YAAMM,KAAKc,IAAL,EAAN;AACA,YAAMC,MAAMxB,KAAKwB,GAAL,GAAY,WAAUrB,KAAM,EAAxC;AACA,YAAMa,QAAQ;AACZA,eAAOhB,KAAKgB,KADA;AAEZS,iBAAS,0BAFG;AAGZC,iBAAU,wBAAuBF,GAAI,oFAAmFxB,KAAKwB,GAAI,qHAHrH;AAIZG,cAAM;AAJM,OAAd;AAMA,YAAMC,iBAAkB,6BAA4B5B,KAAKgB,KAAM,kFAA/D;AACA,aAAO,MAAM,wBAAWa,QAAX,CAAoBD,cAApB,EAAoCZ,KAApC,CAAb;AACD,KAnCD,CAmCE,OAAMI,GAAN,EAAW;AACXnB,cAAQC,GAAR,CAAYkB,GAAZ;AACA,aAAO,EAAEA,KAAK,IAAP,EAAaC,UAAUD,IAAIU,OAA3B,EAAP;AACD;AACF,GA5CK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AA+CA,MAAMC,aAAa,CAACC,CAAD,EAAIhC,IAAJ,EAAUiC,OAAV,KAAsB;AACvChC,UAAQC,GAAR,CAAY,YAAZ;AACA,SAAOH,kBAAkBC,IAAlB,CAAP;AACD,CAHD;;kBAMe+B,U","file":"signUpUser.js","sourcesContent":["import db from '../../sequelize/models/db_connection'\nimport authHandler from './authHandler'\nimport shortId from 'shortid'\nimport { mailClient, emailDefaults } from '../../../lib/mail_client'\n\nconst executeSignUpUser = async (args) => {\n  console.log('executeSignUpUser')\n  let nonce = shortId.generate()\n  let date = new Date()\n  date.setHours(date.getHours()+1)\n  try {\n    let user, newRecord\n    [user, newRecord] = await db.User.findOrCreate(\n      {\n        where: {\n          $or: {\n            activationNonce: nonce,\n            email: args.email\n          }\n        },\n        defaults: {\n          ...args,\n          active: false,\n          activationNonce: nonce,\n          activationExpiry: date,\n        }\n      },\n    )\n    if(user.active) {\n      return { err: true, response: 'There is already an active user with that email.' }\n    }\n    if(!newRecord) {\n      user.set('activationExpiry', date)\n      user.set('activationNonce', nonce)\n    }\n    await user.save()\n    const url = args.url + `?verify=${nonce}`\n    const email = {\n      email: args.email,\n      subject: 'Verify Aura User Account',\n      content: `Please click <a href=${url}>here</a> to verify your account and finish signing up. <br />Or copy and paste: ${args.url} into your address bar on your browser.<br/>If you did not sign-up for please contact us at aura+support@pibrain.io`,\n      type: 'auraUserSignUpConfirmation',\n    }\n    const returnResponse = `An email has been sent to ${args.email}, please click the link to confirm your account. It will expire 1 hour from now.` \n    return await mailClient.sendMail(returnResponse, email)\n  } catch(err) {\n    console.log(err)\n    return { err: true, response: err.message }\n  }\n}\n\n\nconst signUpUser = (_, args, context) => {\n  console.log('signUpUser')\n  return executeSignUpUser(args)\n}\n\n\nexport default signUpUser\n"]}