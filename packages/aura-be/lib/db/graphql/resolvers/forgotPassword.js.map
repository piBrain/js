{"version":3,"sources":["../../../../src/db/graphql/resolvers/forgotPassword.js"],"names":["executeForgotPassword","nonce","secQuestionResponse1","secQuestionResponse2","console","log","date","Date","Session","findOne","where","then","session","err","response","prevDate","lastPasswordResetAttempt","setDate","getDate","set","passwordResetAttempts","save","verifyAndEmailUser","suppliedResetEmail","email","User","$and","user","resetToken","generate","expiryDate","sendMessage","phoneNumber","substring","catch","error","forgotPassword","_","args","context"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,MAAMA,wBAAwB,CAAC,EAAEC,KAAF,EAASC,oBAAT,EAA+BC,oBAA/B,EAAD,KAA2D;AACvFC,UAAQC,GAAR,CAAY,uBAAZ;AACA,QAAMC,OAAO,IAAIC,IAAJ,EAAb;AACA,SAAO,wBAAGC,OAAH,CAAWC,OAAX,CAAoB,EAAEC,OAAO,EAAET,KAAF,EAAT,EAApB,EAA2CU,IAA3C,CAAiDC,OAAD,IAAa;AAClE,QAAG,CAACA,OAAJ,EAAa;AAAE,aAAO,EAAEC,KAAK,IAAP,EAAaC,UAAU,8BAAvB,EAAP;AAAgE;AAC/E,UAAMC,WAAW,IAAIR,IAAJ,CAASK,QAAQI,wBAAjB,CAAjB;AACA,QAAGD,SAASE,OAAT,CAAiBF,SAASG,OAAT,KAAmB,CAApC,KAA0CZ,IAA7C,EAAmD;AACjDM,cAAQO,GAAR,CAAY,uBAAZ,EAAqC,CAArC;AACD;AACD,QAAGP,QAAQQ,qBAAR,IAAiC,CAApC,EAAuC;AAAE,aAAO,EAAEP,KAAK,IAAP,EAAaC,UAAU,+FAAvB,EAAP;AAAkI;AAC3KF,YAAQO,GAAR,CAAY,uBAAZ,EAAqCP,QAAQQ,qBAAR,GAA8B,CAAnE;AACAR,YAAQO,GAAR,CAAY,0BAAZ,EAAwCb,IAAxC;AACA,WAAOM,QAAQS,IAAR,GAAeV,IAAf,CAAoB,MAAM;AAC/B,aAAOW,mBAAmBV,QAAQW,kBAA3B,EAA+CrB,oBAA/C,EAAqEC,oBAArE,CAAP;AACD,KAFM,CAAP;AAGD,GAZM,CAAP;AAaD,CAhBD;;AAkBA,MAAMmB,qBAAqB,CAACE,KAAD,EAAQtB,oBAAR,EAA8BC,oBAA9B,KAAuD;AAChF,SAAO,wBAAGsB,IAAH,CAAQhB,OAAR,CACL;AACEC,WAAO;AACLgB,YAAM;AACJF,aADI;AAEJtB,4BAFI;AAGJC;AAHI;AADD;AADT,GADK,EAULQ,IAVK;AAAA,+CAUA,WAAOgB,IAAP,EAAgB;AACrB,UAAG,CAACA,IAAJ,EAAU;AAAE,eAAO,EAAEd,KAAK,KAAP,EAAcC,UAAU,uCAAxB,EAAP;AAA0E;AACtF,YAAMc,aAAa,kBAAQC,QAAR,EAAnB;AACA,YAAMC,aAAa,IAAIvB,IAAJ,EAAnB;AACAoB,WAAKR,GAAL,CAAS,QAAT,EAAmB,IAAnB;AACAQ,WAAKR,GAAL,CAAS,iBAAT,EAA4B,IAA5B;AACAQ,WAAKR,GAAL,CAAS,YAAT,EAAuBS,UAAvB;AACAD,WAAKR,GAAL,CAAS,aAAT,EAAwBW,WAAWb,OAAX,CAAmBa,WAAWZ,OAAX,KAAqB,CAAxC,CAAxB;AACA,YAAM,6BAAiBa,WAAjB,CAA8B,sCAAqCH,UAAW,EAA9E,EAAiFD,KAAKK,WAAtF,CAAN;AACA,aAAOL,KAAKN,IAAL,GAAYV,IAAZ,CAAiB,YAAM;AAC5B,eAAO,EAAEE,KAAK,KAAP,EAAcC,UAAW,kEAAiEa,KAAKK,WAAL,CAAiBC,SAAjB,CAA2B,CAA3B,CAA8B,EAAxH,EAAP;AACD,OAFM,CAAP;AAGD,KAtBM;;AAAA;AAAA;AAAA;AAAA,QAsBJC,KAtBI,CAsBGrB,GAAD,IAAS;AAChBT,YAAQ+B,KAAR,CAActB,GAAd;AACA,WAAO,EAAEA,KAAK,IAAP,EAAaC,UAAU,8BAAvB,EAAP;AACD,GAzBM,CAAP;AA0BD,CA3BD;;AA6BA,MAAMsB,iBAAiB,CAACC,CAAD,EAAIC,IAAJ,EAAUC,OAAV,KAAsB;AAC3CnC,UAAQC,GAAR,CAAY,gBAAZ;AACA,SAAOL,sBAAsBsC,IAAtB,CAAP;AACD,CAHD;;kBAMeF,c","file":"forgotPassword.js","sourcesContent":["import db from '../../sequelize/models/db_connection'\nimport shortId from 'shortid'\nimport { mailClient, emailDefaults } from '../../../lib/mail_client'\nimport txtMessageClient from '../../../lib/txt_message_client'\n\nconst executeForgotPassword = ({ nonce, secQuestionResponse1, secQuestionResponse2 }) => {\n  console.log('executeForgotPassword')\n  const date = new Date()\n  return db.Session.findOne( { where: { nonce } } ).then((session) => {\n    if(!session) { return { err: true, response: \"Whoops something went wrong.\" } }\n    const prevDate = new Date(session.lastPasswordResetAttempt)\n    if(prevDate.setDate(prevDate.getDate()+1) <= date) {\n      session.set('passwordResetAttempts', 0)\n    }\n    if(session.passwordResetAttempts >= 3) { return { err: true, response: \"Sorry. You have exceeded the maximum reset attempts allowed. Please try again in a few hours.\" }  }\n    session.set('passwordResetAttempts', session.passwordResetAttempts+1)\n    session.set('lastPasswordResetAttempt', date)\n    return session.save().then(() => {\n      return verifyAndEmailUser(session.suppliedResetEmail, secQuestionResponse1, secQuestionResponse2)\n    })\n  })\n}\n\nconst verifyAndEmailUser = (email, secQuestionResponse1, secQuestionResponse2) => {\n  return db.User.findOne(\n    {\n      where: {\n        $and: {\n          email,\n          secQuestionResponse1,\n          secQuestionResponse2,\n        }\n      },\n    },\n  ).then(async (user) => {\n    if(!user) { return { err: false, response: 'Sorry that doesn\\'t seem to match up.' } };\n    const resetToken = shortId.generate()\n    const expiryDate = new Date()\n    user.set('locked', true)\n    user.set('inPasswordReset', true)\n    user.set('resetToken', resetToken)\n    user.set('resetExpiry', expiryDate.setDate(expiryDate.getDate()+1))\n    await txtMessageClient.sendMessage(`Your Aura password reset token is: ${resetToken}`, user.phoneNumber)\n    return user.save().then(() => {\n      return { err: false, response: `A text with a reset code has been sent to the number ending in ${user.phoneNumber.substring(7)}` }\n    })\n  }).catch((err) => {\n    console.error(err)\n    return { err: true, response: 'Whoops something went wrong.' }\n  })\n}\n\nconst forgotPassword = (_, args, context) => {\n  console.log('forgotPassword')\n  return executeForgotPassword(args)\n}\n\n\nexport default forgotPassword\n"]}