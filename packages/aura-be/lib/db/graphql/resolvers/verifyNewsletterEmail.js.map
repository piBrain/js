{"version":3,"sources":["../../../../src/db/graphql/resolvers/verifyNewsletterEmail.js"],"names":["executeVerifyNewsletterEmail","url","timestamp","email","firstName","lastName","organization","resendUrl","Date","err","response","addNewContact","first_name","last_name","process","env","SENDGRID_NEWSLETTER_LIST_ID","Array","isArray","handleErrArray","handleHttpOrStandardError","errs","errMessages","map","message","console","error","handleHttpOrStandardErrors","status","body","headers","verifyNewsletterEmail","_","args","context","log"],"mappings":";;;;;;;;;;AAAA;;;;AAEA,MAAMA;AAAA,6CAA+B,WAAO,EAAEC,GAAF,EAAOC,SAAP,EAAkBC,KAAlB,EAAyBC,SAAzB,EAAoCC,QAApC,EAA8CC,YAA9C,EAAP,EAAuE;AAC1G,QAAIC,YAAa,GAAEN,GAAI,4CAA2CE,KAAM,cAAaC,SAAU,aAAYC,QAAS,iBAAgBC,YAAa,EAAjJ;AACA,QAAI,IAAIE,IAAJ,EAAD,GAAgB,IAAIA,IAAJ,CAASN,SAAT,CAAnB,EAAyC;AACvC,aAAO,EAAEO,KAAK,KAAP,EAAcC,UAAW,8CAA6CH,SAAU,sBAAhF,EAAP;AACD;AACD,QAAI;AAAE,YAAM,wBAAWI,aAAX,CAAyB,EAACR,OAAOA,KAAR,EAAeS,YAAYR,SAA3B,EAAsCS,WAAWR,QAAjD,EAA2DC,cAAcA,YAAzE,EAAzB,EAAkHQ,QAAQC,GAAR,CAAYC,2BAA9H,CAAN;AAAmK,KAAzK,CACA,OAAMP,GAAN,EAAW;AACT,UAAGQ,MAAMC,OAAN,CAAcT,GAAd,CAAH,EAAuB;AACrB,eAAOU,eAAeV,GAAf,CAAP;AACD,OAFD,MAEO;AACL,eAAOW,0BAA0BX,GAA1B,CAAP;AACD;AACF;AACD,WAAO,EAAEA,KAAK,KAAP,EAAcC,UAAW,qCAAzB,EAAP;AACD,GAdK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAgBA,MAAMS,iBAAkBE,IAAD,IAAU;AAC/B,QAAMC,cAAcD,KAAKE,GAAL,CAAUd,GAAD,IAASA,IAAIe,OAAtB,CAApB;AACAC,UAAQC,KAAR,CAAcJ,WAAd;AACA,SAAO,EAAEb,KAAK,IAAP,EAAaC,UAAUY,WAAvB,EAAP;AACD,CAJD;;AAMA,MAAMK,6BAA8BlB,GAAD,IAAS;AAC1C,MAAGA,IAAIC,QAAP,EAAiB;AACfe,YAAQC,KAAR,CAAcjB,IAAIe,OAAlB,EAA2Bf,IAAIC,QAAJ,CAAakB,MAAxC,EAAgDnB,IAAIC,QAAJ,CAAamB,IAA7D,EAAmEpB,IAAIC,QAAJ,CAAaoB,OAAhF;AACD,GAFD,MAEO;AACLL,YAAQC,KAAR,CAAcjB,IAAIe,OAAlB;AACD;AACD,SAAO,EAAEf,KAAK,IAAP,EAAaC,UAAUD,IAAIe,OAA3B,EAAP;AACD,CAPD;;AASA,MAAMO,wBAAwB,CAACC,CAAD,EAAIC,IAAJ,EAAUC,OAAV,KAAsB;AAClDT,UAAQU,GAAR,CAAY,uBAAZ;AACA,SAAOnC,6BAA6BiC,IAA7B,CAAP;AACD,CAHD;;kBAKeF,qB","file":"verifyNewsletterEmail.js","sourcesContent":["import { mailClient, emailDefaults } from '../../../lib/mail_client'\n\nconst executeVerifyNewsletterEmail = async ({ url, timestamp, email, firstName, lastName, organization}) => {\n  let resendUrl = `${url}?resend=true&type=newsletterSignUp&email=${email}&firstName=${firstName}&lastName=${lastName}&organization=${organization}`\n  if((new Date()) > (new Date(timestamp))) {\n    return { err: false, response: `Sorry, the link has expired. Click <a href=${resendUrl}>here</a> to resend.`, }\n  }\n  try { await mailClient.addNewContact({email: email, first_name: firstName, last_name: lastName, organization: organization }, process.env.SENDGRID_NEWSLETTER_LIST_ID ) }\n  catch(err) {\n    if(Array.isArray(err)) {\n      return handleErrArray(err)\n    } else {\n      return handleHttpOrStandardError(err)\n    }\n  }\n  return { err: false, response: `Thank you for verifying your email!` }\n}\n\nconst handleErrArray = (errs) => {\n  const errMessages = errs.map((err) => err.message)\n  console.error(errMessages)\n  return { err: true, response: errMessages }\n}\n\nconst handleHttpOrStandardErrors = (err) => {\n  if(err.response) {\n    console.error(err.message, err.response.status, err.response.body, err.response.headers)\n  } else {\n    console.error(err.message)\n  }\n  return { err: true, response: err.message }\n}\n\nconst verifyNewsletterEmail = (_, args, context) => {\n  console.log('verifyNewsletterEmail')\n  return executeVerifyNewsletterEmail(args)\n}\n\nexport default verifyNewsletterEmail\n"]}