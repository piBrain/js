{"version":3,"sources":["../../../../src/db/graphql/resolvers/getSecurityQuestions.js"],"names":["executeGetSecurityQuestions","email","nonce","user","User","findOne","where","attributes","err","response","message","data","session","Session","set","save","then","secQuestion1","secQuestion2","catch","getSecurityQuestions","_","args","context","console","log"],"mappings":";;;;;;;;;;AAAA;;;;;;AAEA,MAAMA;AAAA,6CAA8B,WAAO,EAAEC,KAAF,EAASC,KAAT,EAAP,EAA4B;AAC9D,QAAI;AACF,UAAIC,OAAO,MAAM,wBAAGC,IAAH,CAAQC,OAAR,CACf;AACEC,eAAO,EAAEL,KAAF,EADT;AAEEM,oBAAY,CAAC,cAAD,EAAiB,cAAjB;AAFd,OADe,CAAjB;AAMD,KAPD,CAOE,OAAMC,GAAN,EAAW;AAAE,aAAO,EAAEA,KAAK,IAAP,EAAaC,UAAUD,IAAIE,OAA3B,EAAoCC,MAAM,EAA1C,EAAP;AAAsD;AACrE,QAAG,CAACR,IAAJ,EAAU;AAAE,aAAO,EAAEK,KAAK,IAAP,EAAaC,UAAU,2CAAvB,EAAoEE,MAAM,EAA1E,EAAP;AAAsF;AAClG,QAAI;AACF,UAAIC,UAAU,MAAM,wBAAGC,OAAH,CAAWR,OAAX,CAClB;AACEC,eAAO,EAAEJ,OAAOA,KAAT;AADT,OADkB,CAApB;AAKD,KAND,CAME,OAAMM,GAAN,EAAW;AACX,aAAO,EAAEA,KAAK,IAAP,EAAaC,UAAUD,IAAIE,OAA3B,EAAoCC,MAAM,EAA1C,EAAP;AACD;AACDC,YAAQE,GAAR,CAAY,oBAAZ,EAAkCb,KAAlC;AACA,WAAOW,QAAQG,IAAR,GAAeC,IAAf,CAAoB,YAAM;AAC/B,aAAO,EAAER,KAAK,KAAP,EAAcC,UAAU,EAAxB,EAA4BE,MAAM,EAAEM,cAAcd,KAAKc,YAArB,EAAmCC,cAAcf,KAAKe,YAAtD,EAAlC,EAAP;AACD,KAFM,EAEJC,KAFI,CAEE,UAACX,GAAD,EAAS;AAChB,aAAO,EAAEA,KAAK,IAAP,EAAaC,UAAUD,IAAIE,OAA3B,EAAoCC,MAAM,EAA1C,EAAP;AACD,KAJM,CAAP;AAKD,GAzBK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AA2BA,MAAMS,uBAAuB,CAACC,CAAD,EAAIC,IAAJ,EAAUC,OAAV,KAAsB;AACjDC,UAAQC,GAAR,CAAY,sBAAZ;AACA,SAAOzB,4BAA4BsB,IAA5B,CAAP;AACD,CAHD;;kBAKeF,oB","file":"getSecurityQuestions.js","sourcesContent":["import db from '../../sequelize/models/db_connection'\n\nconst executeGetSecurityQuestions = async ({ email, nonce }) => {\n  try {\n    var user = await db.User.findOne(\n      {\n        where: { email },\n        attributes: ['secQuestion1', 'secQuestion2']\n      }\n    )\n  } catch(err) { return { err: true, response: err.message, data: {}} }\n  if(!user) { return { err: true, response: 'We couldn\\'t find a user with that email.', data: {}} }\n  try {\n    var session = await db.Session.findOne(\n      {\n        where: { nonce: nonce }\n      }\n    )\n  } catch(err) {\n    return { err: true, response: err.message, data: {} }\n  }\n  session.set('suppliedResetEmail', email)\n  return session.save().then(() => {\n    return { err: false, response: '', data: { secQuestion1: user.secQuestion1, secQuestion2: user.secQuestion2 } }\n  }).catch((err) => {\n    return { err: true, response: err.message, data: {} }\n  })\n}\n\nconst getSecurityQuestions = (_, args, context) => {\n  console.log('getSecurityQuestions')\n  return executeGetSecurityQuestions(args)\n}\n\nexport default getSecurityQuestions\n"]}