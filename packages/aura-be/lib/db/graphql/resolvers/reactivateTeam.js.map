{"version":3,"sources":["../../../../src/db/graphql/resolvers/reactivateTeam.js"],"names":["executeReactivateTeam","nonce","name","session","Session","findOne","where","err","response","user","getUser","teams","getTeams","team","filter","active","userTeam","UserTeam","get","set","save","console","error","message","reactivateTeam","_","args","context","log"],"mappings":";;;;;;;;;;AAAA;;;;;;AAEA,MAAMA;AAAA,6CAAwB,WAAO,EAAEC,KAAF,EAASC,IAAT,EAAP,EAA2B;AACvD,QAAI;AACF,UAAIC,UAAW,MAAM,wBAAGC,OAAH,CAAWC,OAAX,CAAmB,EAAEC,OAAO,EAAEL,KAAF,EAAT,EAAnB,CAArB;AACA,UAAG,CAACE,OAAJ,EAAa;AAAE,eAAO,EAAEI,KAAK,IAAP,EAAaC,UAAU,+BAAvB,EAAP;AAAiE;AAChF,UAAIC,OAAO,MAAMN,QAAQO,OAAR,EAAjB;AACA,UAAG,CAACD,IAAJ,EAAU;AAAE,eAAO,EAAEF,KAAK,IAAP,EAAaC,UAAU,+BAAvB,EAAP;AAAiE;AAC7E,YAAMG,QAAQ,MAAMF,KAAKG,QAAL,EAApB;AACA,YAAMC,OAAOF,MAAMG,MAAN,CAAa,UAACD,IAAD;AAAA,eAAWA,KAAKX,IAAL,IAAaA,IAAxB;AAAA,OAAb,EAA4C,CAA5C,CAAb;AACA,UAAGW,KAAKE,MAAR,EAAgB;AAAE,eAAO,EAAER,KAAK,IAAP,EAAaC,UAAU,2BAAvB,EAAP;AAA6D;AAC/E,YAAMQ,WAAWH,KAAKI,QAAtB;AACA,UAAGD,SAASE,GAAT,CAAa,MAAb,KAAwB,OAA3B,EAAoC;AAAE,eAAO,EAAEX,KAAK,IAAP,EAAaC,UAAW,gCAAxB,EAAP;AAAiE;AACvGK,WAAKM,GAAL,CAAS,QAAT,EAAmB,IAAnB;AACA,YAAMN,KAAKO,IAAL,EAAN;AACA,aAAO,EAAEb,KAAK,KAAP,EAAcC,UAAW,WAAUN,IAAK,mBAAxC,EAAP;AACD,KAbD,CAaE,OAAMK,GAAN,EAAW;AACXc,cAAQC,KAAR,CAAcf,GAAd;AACA,aAAO,EAAEA,KAAK,IAAP,EAAaC,UAAUD,IAAIgB,OAA3B,EAAP;AACD;AACF,GAlBK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAoBA,MAAMC,iBAAiB,CAACC,CAAD,EAAIC,IAAJ,EAAUC,OAAV,KAAsB;AAC3CN,UAAQO,GAAR,CAAY,gBAAZ;AACA,SAAO5B,sBAAsB0B,IAAtB,CAAP;AACD,CAHD;;kBAKeF,c","file":"reactivateTeam.js","sourcesContent":["import db from '../../sequelize/models/db_connection'\n\nconst executeReactivateTeam = async ({ nonce, name }) => {\n  try {\n    let session =  await db.Session.findOne({ where: { nonce } })\n    if(!session) { return { err: true, response: 'Whoops! Something went wrong.' } }\n    let user = await session.getUser()\n    if(!user) { return { err: true, response: 'Whoops! Something went wrong.' } }\n    const teams = await user.getTeams()\n    const team = teams.filter((team) => (team.name == name))[0]\n    if(team.active) { return { err: true, response: 'Team already reactivated!' } }\n    const userTeam = team.UserTeam\n    if(userTeam.get('type') != 'OWNER') { return { err: true, response: `Must be the owner of the team!`} }\n    team.set('active', true)\n    await team.save()\n    return { err: false, response: `Success ${name} was reactivated!` }\n  } catch(err) {\n    console.error(err)\n    return { err: true, response: err.message }\n  }\n}\n\nconst reactivateTeam = (_, args, context) => {\n  console.log('deactivateTeam')\n  return executeReactivateTeam(args)\n}\n\nexport default reactivateTeam\n\n"]}