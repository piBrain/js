{"version":3,"sources":["../src/index.js"],"names":["req","res","e","login","console","log","sendStatus","payload","getPayload","process","env","GSUITE_DOMAIN","user","User","findOrCreate","where","email","token","dstroyed_sessions","Session","destroy","userId","id","session","create","nonce","generateNonceString","write","end","googleSuccessCallback","authClient","verifyIdToken","headers","GOOGLE_CLIENT_ID","authenticationHandler","db_success","db_sync_result","DATABASE_URL","server","qaApp","listen","LISTEN_PORT","resolve","reject","on","err","initHttpServer","initDB","NODE_ENV","schema","typeDefs","resolvers","OAuth2","randomBytes","use","json","request","authorization","split","undefined","context","endpointURL","sequelize","sync","then","qaServer","createServer","lambdaHandler","event","proxy"],"mappings":"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","file":"index.js","sourcesContent":["const { NODE_ENV } = process.env\nimport config from '../config'\nconfig()\n\nimport awsServerlessExpress from 'aws-serverless-express'\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport { graphiqlExpress, graphqlExpress } from 'graphql-server-express'\nimport { makeExecutableSchema } from 'graphql-tools'\nimport typeDefs from './db/graphql/schema/base_schema'\nimport resolvers from './db/graphql/resolvers/combinedResolvers'\nimport db from './db/sequelize/models/db_connection'\nimport cors from 'cors'\nimport GoogleAuth from 'google-auth-library'\nimport crypto from 'crypto'\nimport base64url from 'base64url'\n\nconst qaApp = express()\n\nconst schema = makeExecutableSchema({ typeDefs, resolvers })\n\nconst authClient = new(new GoogleAuth).OAuth2(process.env.GOOGLE_CLIENT_ID)\n\nconst generateNonceString = () => {\n  return base64url(crypto.randomBytes(64))\n}\n\nqaApp.use(cors())\n\nqaApp.use(\n  '/graphql',\n  bodyParser.json(),\n  graphqlExpress((request) => {\n    const token = request.headers\n      && request.headers.authorization\n      && request.headers.authorization.split(' ')[1]\n      || undefined\n    return {\n      context: { token },\n      schema,\n    }\n  }),\n)\n\n\nqaApp.use(\n    '/graphiql',\n    graphiqlExpress({ endpointURL: '/graphql' }),\n)\n\nasync function authenticationHandler( req, res ) {\n   async function googleSuccessCallback(e, login) {\n     console.log('googleSuccessCallback')\n    if(e) {\n      console.log(e)\n      res.sendStatus(500)\n      return\n    }\n    let payload = login.getPayload()\n    console.log(JSON.stringify({\n      payload,\n      login,\n    }, null, 2))\n    if(process.env.GSUITE_DOMAIN == payload['hd']) {\n      const user = (await db.User.findOrCreate({ where: { email: payload['email'], token: payload['sub']} }))[0]\n      const dstroyed_sessions = await db.Session.destroy({ where: { userId: user.id } })\n      const session = await db.Session.create({ nonce: generateNonceString(), userId: user.id})\n      res.write(session.nonce)\n      res.end()\n      return\n    } else {\n      res.sendStatus(401)\n      return\n    }\n  }\n  authClient.verifyIdToken(req.headers['google-access-token'], process.env.GOOGLE_CLIENT_ID, googleSuccessCallback)\n}\n\nqaApp.use(\n  '/auth',\n  authenticationHandler\n)\n\nconst db_sync_result = initDB()\n\n\nexport async function initHttpServer() {\n  let db_success = await db_sync_result\n\n  console.log(`process.env.DATABASE_URL: ${process.env.DATABASE_URL}`)\n  const server = qaApp.listen(process.env.LISTEN_PORT)\n  return new Promise((resolve, reject) => {\n    server.on('listening', () => {\n      console.log(`DataQA API now listening on port ${process.env.LISTEN_PORT}`)\n      resolve(server)\n    })\n    server.on('error', err => reject(err))\n  })\n}\n\nexport function initDB() {\n  console.log('Initializing DB.')\n  return db.sequelize.sync()\n    .then(() => (console.log('db initialized')))\n}\n\n\nconst qaServer = awsServerlessExpress.createServer(qaApp)\n\nexport const lambdaHandler = async (event, context) => {\n  await db_sync_result\n  // console.log(`process.env keys: ${Object.keys(process.env)}`)\n  console.log(`process.env.DATABASE_URL: ${process.env.DATABASE_URL}`)\n  return awsServerlessExpress.proxy(qaServer, event, context)\n}\n"]}