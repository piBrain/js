{"version":3,"sources":["../src/load_data.js"],"names":["s3","listObjects","Bucket","process","env","S3_BUCKET_NAME","Prefix","promise","objectList","Contents","obj","data","getObject","Key","console","log","body","Body","dataLines","toString","split","pop","jsonLines","map","row","JSON","parse","trim","line","Site","upsert","url","quantcast_rank","err","importData","runImport","FailedImport","Error","constructor","message","captureStackTrace","name","S3","then","objects","catch","error"],"mappings":";;;;;;;;;;;;;;;6CAgBA,aAA6B;AAC3B,WAAO,MAAMA,GAAGC,WAAH,CAAe,EAACC,QAAQC,QAAQC,GAAR,CAAYC,cAArB,EAAqCC,QAAQ,wBAA7C,EAAf,EAAuFC,OAAvF,EAAb;AACD,G;;kBAFcN,W;;;;;;8CAIf,WAA0BO,UAA1B,EAAsC;AACpC,QAAI;AAAA;AAAA;AAAA;;AAAA;AACF,wDAAgBA,WAAWC,QAA3B,4GAAqC;AAAA,cAA5BC,GAA4B;;AACnC,cAAIC,OAAO,MAAMX,GAAGY,SAAH,CAAa,EAAEV,QAAQC,QAAQC,GAAR,CAAYC,cAAtB,EAAsCQ,KAAKH,IAAIG,GAA/C,EAAb,EAAkEN,OAAlE,EAAjB;AACAO,kBAAQC,GAAR,CAAYL,IAAIG,GAAhB;AACA,cAAIG,OAAOL,KAAKM,IAAhB;AACA,cAAIC,YAAYF,KAAKG,QAAL,GAAgBC,KAAhB,CAAsB,IAAtB,CAAhB;AACAF,oBAAUG,GAAV;AACA,cAAIC,YAAYJ,UAAUK,GAAV,CAAc,UAACC,GAAD;AAAA,mBAASC,KAAKC,KAAL,CAAWF,IAAIG,IAAJ,EAAX,CAAT;AAAA,WAAd,CAAhB;AANmC;AAAA;AAAA;;AAAA;AAOnC,6DAAiBL,SAAjB,iHAA4B;AAAA,kBAAnBM,IAAmB;;AAC1B,kBAAI;AACF,sBAAM,wBAAGC,IAAH,CAAQC,MAAR,CAAe,EAAEC,KAAKH,KAAK,SAAL,CAAP,EAAwBI,gBAAgB,CAAxC,EAAf,CAAN;AACD,eAFD,CAGA,OAAMC,GAAN,EAAW;AACTnB,wBAAQC,GAAR,CAAYkB,GAAZ;AACD;AACF;AAdkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAepC;AAhBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBH,KAjBD,CAkBA,OAAMA,GAAN,EAAW;AACTnB,cAAQC,GAAR,CAAYkB,GAAZ;AACD;AACF,G;;kBAtBcC,U;;;;;QAwBCC,S,GAAAA,S;;AA5ChB;;;;AAGA;;;;AACA;;;;;;AAHA;;AAKA,MAAMC,YAAN,SAA2BC,KAA3B,CAAiC;AAC/BC,cAAYC,OAAZ,EAAqB;AACnBF,UAAMG,iBAAN,CAAwB,IAAxB,EAA8B,KAAKF,WAAnC;AACA,SAAKG,IAAL,GAAY,KAAKH,WAAL,CAAiBG,IAA7B;AACA,SAAKF,OAAL,GAAeA,OAAf;AACD;AAL8B;;AAQjC,IAAIvC,KAAK,IAAI,iBAAI0C,EAAR,EAAT;;AA8BO,SAASP,SAAT,GAAqB;AAC1BlC,gBAAc0C,IAAd,CAAoBC,OAAD,IAAa;AAC9BV,eAAWU,OAAX,EACGD,IADH,CACQ,MAAM7B,QAAQC,GAAR,CAAY,WAAZ,CADd,EAEG8B,KAFH,CAEUZ,GAAD,IAASnB,QAAQgC,KAAR,CAAcb,GAAd,CAFlB;AAGD,GAJD,EAIGY,KAJH,CAIUZ,GAAD,IAAS;AAChBnB,YAAQgC,KAAR,CAAcb,GAAd;AACD,GAND;AAOD","file":"load_data.js","sourcesContent":["import config from '../config'\nconfig()\n\nimport AWS from 'aws-sdk';\nimport db from './db/sequelize/models/db_connection'\n\nclass FailedImport extends Error {\n  constructor(message) {\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.message = message;\n  }\n}\n\nvar s3 = new AWS.S3()\n\nasync function listObjects() {\n  return await s3.listObjects({Bucket: process.env.S3_BUCKET_NAME, Prefix: \"datasets/cleaned.data/\"}).promise()\n}\n\nasync function importData(objectList) {\n  try {\n    for (let obj of objectList.Contents) {\n      let data = await s3.getObject({ Bucket: process.env.S3_BUCKET_NAME, Key: obj.Key}).promise()\n      console.log(obj.Key)\n      let body = data.Body\n      let dataLines = body.toString().split('\\n')\n      dataLines.pop()\n      let jsonLines = dataLines.map((row) => JSON.parse(row.trim()))\n      for (let line of jsonLines) {\n        try {\n          await db.Site.upsert({ url: line['api_url'], quantcast_rank: 0})\n        }\n        catch(err) {\n          console.log(err)\n        }\n      }\n    }\n  }\n  catch(err) {\n    console.log(err)\n  }\n}\n\nexport function runImport() {\n  listObjects().then((objects) => {\n    importData(objects)\n      .then(() => console.log('Finished.'))\n      .catch((err) => console.error(err))\n  }).catch((err) => {\n    console.error(err)\n  })\n}\n"]}