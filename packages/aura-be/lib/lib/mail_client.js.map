{"version":3,"sources":["../../src/lib/mail_client.js"],"names":["configuredClient","process","env","SENDGRID_API_KEY","createMail","from","to","subject","content","customArgs","html","mailFrom","Email","mailTo","type","mailContent","Content","mailObject","Mail","key","addCustomArg","CustomArgs","sendMail","response","sent","send","err","console","error","message","status","body","headers","addNewContact","fields","listId","request","emptyRequest","method","path","API","then","error_count","errors","contactId","persisted_recipients","mail","toJSON","mailClient"],"mappings":"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","file":"mail_client.js","sourcesContent":["import { mail } from 'sendgrid'\nimport sendgrid from 'sendgrid'\n\nlet configuredClient = sendgrid(process.env.SENDGRID_API_KEY)\n\nconst createMail = ({ from, to, subject, content, customArgs }, html=false) => {\n  let mailFrom = new mail.Email(from)\n  let mailTo = new mail.Email(to)\n  let type = html == false ? 'text/plain' : 'text/html'\n  let mailContent = new mail.Content(type, content)\n  let mailObject = new mail.Mail(mailFrom, subject, mailTo, mailContent)\n  for(let key of Object.keys(customArgs)) {\n    mailObject.addCustomArg(new mail.CustomArgs(key, customArgs[key]))\n  }\n  return mailObject\n}\n\nconst sendMail = async (response, { to, subject, content, type, from } = { from: 'aura@pibrain.io' }) => {\n  try {\n    const sent = await send(createMail({\n      from,\n      to,\n      subject,\n      content,\n      customArgs: { type },\n    }, true))\n    return { err: false, response  }\n  } catch(err) {\n    console.error(err)\n    console.error(err.message, err.response.status, err.response.body, err.response.headers)\n    return { err: true, response: err.message }\n  }\n}\n\nconst addNewContact = (fields, listId=null) => {\n  let request = configuredClient.emptyRequest({\n    method: 'POST',\n    path: '/v3/contactdb/recipients',\n    body: [fields]\n  });\n\n  return configuredClient.API(request).then( async (response) => {\n    if(listId == null) { return };\n    if(response.body.error_count > 0) { throw response.body.errors }\n    let contactId = response.body.persisted_recipients[0];\n    let request = configuredClient.emptyRequest({\n      method: 'POST',\n      path: '/v3/contactdb/lists/' + listId + '/recipients/' + contactId,\n      body: [fields]\n    });\n\n    try {\n      return await configuredClient.API(request)\n    } catch(err) {\n      console.error(err)\n    }\n  })\n}\n\nconst send = (mail) => {\n  let request = configuredClient.emptyRequest({\n    method: 'POST',\n    path: '/v3/mail/send',\n    body: mail.toJSON()\n  })\n  return configuredClient.API(request)\n}\n\nexport const mailClient = { createMail, sendMail, addNewContact }\n"]}